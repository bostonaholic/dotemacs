#+TITLE: DotEmacs
#+Author: Matthew Boston

* Table of Contents :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#use-better-defaults][Use better defaults]]
  - [[#load-customel][Load =.custom.el=]]
  - [[#load-secretel][Load =.secret.el=]]
- [[#theme][Theme]]
- [[#languages][Languages]]
  - [[#clojure][Clojure]]
  - [[#css][CSS]]
  - [[#docker][Docker]]
  - [[#html][HTML]]
  - [[#javascript][JavaScript]]
  - [[#lisp][Lisp]]
  - [[#markdown][Markdown]]
  - [[#org][Org]]
  - [[#ruby][Ruby]]
  - [[#yaml][YAML]]
- [[#programming][Programming]]
  - [[#magit][Magit]]
  - [[#paredit][Paredit]]
- [[#miscellaneous][Miscellaneous]]

* Bootstrap

** Use better defaults

Maximize by default.

#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'fullscreen 'maximized)
#+END_SRC

Some UI elements are rather invasive.

#+BEGIN_SRC emacs-lisp
(when window-system
  (horizontal-scroll-bar-mode 0)                   ; Disable the horizontal scroll bar
  (scroll-bar-mode 0)                              ; Disable the scroll bar
  (tool-bar-mode 0)                                ; Disable the tool bar
  (tooltip-mode 0))                                ; Disable the tooltips
#+END_SRC

More better defaults.

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                    ; Silence warnings for redefinition
 column-number-mode t                              ; Show column number
 confirm-kill-emacs 'yes-or-no-p                   ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                  ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                       ; Delete files to trash
 display-time-default-load-average nil             ; Don't display load average
 display-time-format "%H:%M"                       ; Format the time string
 fill-column 80                                    ; Set width for automatic line breaks
 help-window-select t                              ; Focus new help windows when opened
 indent-tabs-mode nil                              ; Stop using tabs to indent
 inhibit-startup-screen t                          ; Disable start-up screen
 kill-whole-line t                                 ; Kill whole lines
 large-file-warning-threshold 100000000            ; Warn before opening large files
 left-margin-width 1 right-margin-width 1          ; Add left and right margins
 linum-format " %3i "                              ; Format line numbers
 mode-require-final-newline 'visit                 ; Add a newline at EOF on visit
 mouse-yank-at-point t                             ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                        ; Don't use sRGB colors
 recenter-positions '(5 top bottom)                ; Set re-centering positions
 ring-bell-function 'ignore                        ; Ignore the bell
 scroll-conservatively most-positive-fixnum        ; Always scroll by one line
 scroll-margin 10                                  ; Add a margin when scrolling vertically
 select-enable-clipboard t                         ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                     ; End a sentence after a dot and a space
 show-trailing-whitespace nil                      ; Display trailing whitespaces
 split-height-threshold nil                        ; Disable vertical window splitting
 split-width-threshold nil                         ; Disable horizontal window splitting
 tab-width 4                                       ; Set width for tabs
 uniquify-buffer-name-style 'forward               ; Uniquify buffer names
 vc-follow-symlinks t                              ; Follow symlinks under version control
 visible-bell nil                                  ; Do not show the visible bell
 whitespace-style '(face trailing lines-tail tabs) ; Show trailing whitespace
 window-combination-resize t                       ; Resize windows proportionally
 x-stretch-cursor t)                               ; Stretch cursor to the glyph width

(delete-selection-mode)                            ; Replace region when inserting text
(fringe-mode 0)                                    ; Hide fringes
(fset 'yes-or-no-p 'y-or-n-p)                      ; Replace yes/no prompts with y/n
(global-hl-line-mode)                              ; Hightlight current line
(global-linum-mode t)                              ; Turn on line numbers
(global-subword-mode)                              ; Iterate through CamelCase words
(menu-bar-mode 0)                                  ; Disable the menu bar
(mouse-avoidance-mode 'banish)                     ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)               ; Enable downcase-region
(put 'upcase-region 'disabled nil)                 ; Enable upcase-region
(show-paren-mode 1)                                ; Show matching parens
#+END_SRC

Garbage collect on focus-out.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Load =.custom.el=

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secret.el=

#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

Load some of those secrets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name my/user-full-name
      user-mail-address my/user-mail-address)
#+END_SRC

* Theme

Set the font that I like.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Mono for Powerline")
#+END_SRC

The face for italic text is underlined when the font does not support slant by default. I don't like it.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'italic nil :underline nil)
#+END_SRC

Load =monokai-theme=.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :demand t)
#+END_SRC

* Languages

** Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :mode ("\\.boot\\'" "\\.edn\\'")
  :init
  ;; This regexp matches shebang expressions like `#!/usr/bin/env boot'
  (add-to-list 'magic-mode-alist '("#!.*boot\\s-*$" . clojure-mode))
  :config
  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
  (add-hook 'clojurescript-mode-hook 'enable-paredit-mode)
  (add-hook 'clojure-mode-hook 'turn-on-eldoc-mode))

(use-package cider
  :init
  (setq cider-stacktrace-default-filters '(tooling dup)
        cider-repl-pop-to-buffer-on-connect nil
        cider-prompt-save-file-on-load nil
        cider-repl-use-clojure-font-lock t
        cider-repl-display-help-banner nil)
  (add-hook 'clojure-mode-hook 'cider-mode)
  :config
  (add-hook 'cider-mode-hook 'eldoc-mode)
  (add-hook 'cider-repl-mode-hook 'subword-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode))
#+END_SRC

** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :config (setq-default css-indent-offset 2))

(use-package scss-mode
  :ensure nil
  :preface
  (defun msb/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :delight scss-mode "SCSS"
  :mode ("\\.css\\'" "\\.sass\\'" "\\.scss\\'")
  :init (add-hook 'scss-mode-hook #'msb/scss-set-comment-style))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC

** HTML

HTML mode is defined in =sgml-mode.el=.

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :delight html-mode "HTML"
  :init
  (add-hook 'html-mode-hook #'sgml-electric-tag-pair-mode)
  (add-hook 'html-mode-hook #'sgml-name-8bit-mode)
  :config (setq-default sgml-basic-offset 2))
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode)

(use-package js2-mode
  :delight js2-jsx-mode "JSX"
  :mode ("\\.jsx?\\'" . js2-jsx-mode)
  :interpreter ("node" . js2-jsx-mode))

(use-package json-mode
  :mode "\\.jshintrc\\'")

(use-package tern
  :init (add-hook 'js-mode-hook #'tern-mode))
#+END_SRC

** Lisp

#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
  :ensure nil
  :delight emacs-lisp-mode "Emacs Lisp"
  :config (delight 'lisp-interaction-mode "Lisp Interaction"))

(use-package ielm
  :ensure nil
  :init (add-hook 'ielm-mode-hook '(lambda () (setq-local scroll-margin 0))))

(use-package lisp-mode
  :ensure nil
  :delight lisp-mode "Lisp")
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :delight markdown-mode "Markdown"
  :config
  (unbind-key "M-<down>" markdown-mode-map)
  (unbind-key "M-<up>" markdown-mode-map)
  (setq-default
    markdown-asymmetric-header t
    markdown-split-window-direction 'right)
  (add-hook 'markdown-mode-hook 'turn-on-orgtbl))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :delight org-mode "Org"
  :preface
  (defun msb/org-src-buffer-name (org-buffer-name language)
    "Construct the buffer name for a source editing buffer. See
`org-src--construct-edit-buffer-name'."
    (format "*%s*" org-buffer-name))
  (defun msb/org-backward-paragraph-shifted ()
    "See `org-backward-paragraph'. Support shift."
    (interactive "^")
    (org-backward-paragraph))
  (defun msb/org-forward-paragraph-shifted ()
    "See `org-forward-paragraph'. Support shift."
    (interactive "^")
    (org-forward-paragraph))
  :bind
  (:map org-mode-map
        ([remap backward-paragraph] . msb/org-backward-paragraph-shifted)
        ([remap forward-paragraph] . msb/org-forward-paragraph-shifted)
        ("<C-return>" . nil)
        ("<C-S-down>" . nil)
        ("<C-S-up>" . nil))
  :init
  (add-hook 'org-mode-hook #'org-sticky-header-mode)
  (add-hook 'org-mode-hook #'toc-org-enable)
  :config
  (setq-default
   org-descriptive-links nil
   org-support-shift-select 'always
   org-startup-folded nil
   org-startup-truncated nil)
  (advice-add 'org-src--construct-edit-buffer-name :override #'msb/org-src-buffer-name))

(use-package org-faces
  :ensure nil
  :after org)

(use-package org-src
  :ensure nil
  :after org
  :config
  (setq-default
   org-edit-src-content-indentation 0
   org-edit-src-persistent-message nil
   org-src-window-setup 'current-window))
#+END_SRC

Display the current Org header in the header-line.

#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
  :config
  (setq-default
   org-sticky-header-full-path 'full
   org-sticky-header-outline-path-separator " / "))
#+END_SRC

Tired of having to manually update your tables of contents? This package will
maintain a TOC at the first heading that has a =:TOC:= tag.

#+BEGIN_SRC emacs-lisp
(use-package toc-org :after org)
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
(use-package rbenv)

(use-package ruby-mode
  :mode "Brewfile\\'"
  :interpreter "ruby")
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :delight yaml-mode "YAML"
  :mode ("\\.ya?ml\\'" "Procfile\\'"))
#+END_SRC

* Programming

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :init (setq magit-commit-arguments (list (concat "--gpg-sign=" my/gpg-signing-key))))
#+END_SRC

** Paredit

#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses)

(use-package paredit
  :diminish paredit-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode))
#+END_SRC

* Miscellaneous

#+BEGIN_SRC emacs-lisp
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
    Prefixed with negative \\[universal-argument], sorts in reverse.
    The variable `sort-fold-case' determines whether alphabetic case
    affects the sort order.
    See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))

(defun sort-symbols (reverse beg end)
  "Sort symbols in region alphabetically, in REVERSE if negative.
    See `sort-words'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\(\\sw\\|\\s_\\)+" "\\&" beg end))
#+END_SRC
